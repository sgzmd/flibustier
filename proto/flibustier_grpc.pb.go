// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlibustierClient is the client API for Flibustier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlibustierClient interface {
	GlobalSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	CheckUpdates(ctx context.Context, in *UpdateCheckRequest, opts ...grpc.CallOption) (*UpdateCheckResponse, error)
	GetSeriesBooks(ctx context.Context, in *SequenceBooksRequest, opts ...grpc.CallOption) (*EntityBookResponse, error)
	GetAuthorBooks(ctx context.Context, in *AuthorBooksRequest, opts ...grpc.CallOption) (*EntityBookResponse, error)
	TrackEntry(ctx context.Context, in *TrackedEntry, opts ...grpc.CallOption) (*TrackEntryResponse, error)
	ListTrackedEntries(ctx context.Context, in *ListTrackedEntriesRequest, opts ...grpc.CallOption) (*ListTrackedEntriesResponse, error)
	UntrackEntry(ctx context.Context, in *TrackedEntryKey, opts ...grpc.CallOption) (*UntrackEntryResponse, error)
}

type flibustierClient struct {
	cc grpc.ClientConnInterface
}

func NewFlibustierClient(cc grpc.ClientConnInterface) FlibustierClient {
	return &flibustierClient{cc}
}

func (c *flibustierClient) GlobalSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/flibustier.Flibustier/GlobalSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flibustierClient) CheckUpdates(ctx context.Context, in *UpdateCheckRequest, opts ...grpc.CallOption) (*UpdateCheckResponse, error) {
	out := new(UpdateCheckResponse)
	err := c.cc.Invoke(ctx, "/flibustier.Flibustier/CheckUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flibustierClient) GetSeriesBooks(ctx context.Context, in *SequenceBooksRequest, opts ...grpc.CallOption) (*EntityBookResponse, error) {
	out := new(EntityBookResponse)
	err := c.cc.Invoke(ctx, "/flibustier.Flibustier/GetSeriesBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flibustierClient) GetAuthorBooks(ctx context.Context, in *AuthorBooksRequest, opts ...grpc.CallOption) (*EntityBookResponse, error) {
	out := new(EntityBookResponse)
	err := c.cc.Invoke(ctx, "/flibustier.Flibustier/GetAuthorBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flibustierClient) TrackEntry(ctx context.Context, in *TrackedEntry, opts ...grpc.CallOption) (*TrackEntryResponse, error) {
	out := new(TrackEntryResponse)
	err := c.cc.Invoke(ctx, "/flibustier.Flibustier/TrackEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flibustierClient) ListTrackedEntries(ctx context.Context, in *ListTrackedEntriesRequest, opts ...grpc.CallOption) (*ListTrackedEntriesResponse, error) {
	out := new(ListTrackedEntriesResponse)
	err := c.cc.Invoke(ctx, "/flibustier.Flibustier/ListTrackedEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flibustierClient) UntrackEntry(ctx context.Context, in *TrackedEntryKey, opts ...grpc.CallOption) (*UntrackEntryResponse, error) {
	out := new(UntrackEntryResponse)
	err := c.cc.Invoke(ctx, "/flibustier.Flibustier/UntrackEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlibustierServer is the server API for Flibustier service.
// All implementations must embed UnimplementedFlibustierServer
// for forward compatibility
type FlibustierServer interface {
	GlobalSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	CheckUpdates(context.Context, *UpdateCheckRequest) (*UpdateCheckResponse, error)
	GetSeriesBooks(context.Context, *SequenceBooksRequest) (*EntityBookResponse, error)
	GetAuthorBooks(context.Context, *AuthorBooksRequest) (*EntityBookResponse, error)
	TrackEntry(context.Context, *TrackedEntry) (*TrackEntryResponse, error)
	ListTrackedEntries(context.Context, *ListTrackedEntriesRequest) (*ListTrackedEntriesResponse, error)
	UntrackEntry(context.Context, *TrackedEntryKey) (*UntrackEntryResponse, error)
	mustEmbedUnimplementedFlibustierServer()
}

// UnimplementedFlibustierServer must be embedded to have forward compatible implementations.
type UnimplementedFlibustierServer struct {
}

func (UnimplementedFlibustierServer) GlobalSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalSearch not implemented")
}
func (UnimplementedFlibustierServer) CheckUpdates(context.Context, *UpdateCheckRequest) (*UpdateCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUpdates not implemented")
}
func (UnimplementedFlibustierServer) GetSeriesBooks(context.Context, *SequenceBooksRequest) (*EntityBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriesBooks not implemented")
}
func (UnimplementedFlibustierServer) GetAuthorBooks(context.Context, *AuthorBooksRequest) (*EntityBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorBooks not implemented")
}
func (UnimplementedFlibustierServer) TrackEntry(context.Context, *TrackedEntry) (*TrackEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackEntry not implemented")
}
func (UnimplementedFlibustierServer) ListTrackedEntries(context.Context, *ListTrackedEntriesRequest) (*ListTrackedEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrackedEntries not implemented")
}
func (UnimplementedFlibustierServer) UntrackEntry(context.Context, *TrackedEntryKey) (*UntrackEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntrackEntry not implemented")
}
func (UnimplementedFlibustierServer) mustEmbedUnimplementedFlibustierServer() {}

// UnsafeFlibustierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlibustierServer will
// result in compilation errors.
type UnsafeFlibustierServer interface {
	mustEmbedUnimplementedFlibustierServer()
}

func RegisterFlibustierServer(s grpc.ServiceRegistrar, srv FlibustierServer) {
	s.RegisterService(&Flibustier_ServiceDesc, srv)
}

func _Flibustier_GlobalSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlibustierServer).GlobalSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flibustier.Flibustier/GlobalSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlibustierServer).GlobalSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flibustier_CheckUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlibustierServer).CheckUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flibustier.Flibustier/CheckUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlibustierServer).CheckUpdates(ctx, req.(*UpdateCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flibustier_GetSeriesBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlibustierServer).GetSeriesBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flibustier.Flibustier/GetSeriesBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlibustierServer).GetSeriesBooks(ctx, req.(*SequenceBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flibustier_GetAuthorBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlibustierServer).GetAuthorBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flibustier.Flibustier/GetAuthorBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlibustierServer).GetAuthorBooks(ctx, req.(*AuthorBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flibustier_TrackEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackedEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlibustierServer).TrackEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flibustier.Flibustier/TrackEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlibustierServer).TrackEntry(ctx, req.(*TrackedEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flibustier_ListTrackedEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrackedEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlibustierServer).ListTrackedEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flibustier.Flibustier/ListTrackedEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlibustierServer).ListTrackedEntries(ctx, req.(*ListTrackedEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flibustier_UntrackEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackedEntryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlibustierServer).UntrackEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flibustier.Flibustier/UntrackEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlibustierServer).UntrackEntry(ctx, req.(*TrackedEntryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// Flibustier_ServiceDesc is the grpc.ServiceDesc for Flibustier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flibustier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flibustier.Flibustier",
	HandlerType: (*FlibustierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GlobalSearch",
			Handler:    _Flibustier_GlobalSearch_Handler,
		},
		{
			MethodName: "CheckUpdates",
			Handler:    _Flibustier_CheckUpdates_Handler,
		},
		{
			MethodName: "GetSeriesBooks",
			Handler:    _Flibustier_GetSeriesBooks_Handler,
		},
		{
			MethodName: "GetAuthorBooks",
			Handler:    _Flibustier_GetAuthorBooks_Handler,
		},
		{
			MethodName: "TrackEntry",
			Handler:    _Flibustier_TrackEntry_Handler,
		},
		{
			MethodName: "ListTrackedEntries",
			Handler:    _Flibustier_ListTrackedEntries_Handler,
		},
		{
			MethodName: "UntrackEntry",
			Handler:    _Flibustier_UntrackEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flibustier.proto",
}
